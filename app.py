import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import os
from dotenv import load_dotenv
import json

load_dotenv()

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

@st.cache_resource
def get_google_sheets_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
    try:
        credentials_path = os.getenv('GOOGLE_CREDENTIALS_PATH', './credentials.json')
        
        if not os.path.exists(credentials_path):
            st.error(f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}")
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ credentials.json –∏–∑ Google Cloud Console")
            return None
            
        credentials = Credentials.from_service_account_file(
            credentials_path, 
            scopes=SCOPES
        )
        return gspread.authorize(credentials)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {str(e)}")
        return None

def get_sheet_from_url(client, url):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ Google Sheets –ø–æ URL"""
    try:
        sheet_id = url.split('/d/')[1].split('/')[0]
        spreadsheet = client.open_by_key(sheet_id)
        sheet_name = os.getenv('SHEET_NAME', 'Sheet1')
        return spreadsheet.worksheet(sheet_name)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        return None

def load_wishlist_data(sheet):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—à–ª–∏—Å—Ç–∞"""
    try:
        data = sheet.get_all_records()
        if not data:
            headers = ['–í—ã–±—Ä–∞–Ω–æ', '–ü–æ–¥–∞—Ä–æ–∫', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞']
            sheet.append_row(headers)
            return pd.DataFrame(columns=headers)
        
        df = pd.DataFrame(data)
        # –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞
        selected_col = None
        for col in df.columns:
            if '–≤—ã–±—Ä–∞–Ω–æ' in col.lower():
                selected_col = col
                break
        
        if selected_col:
            df['–í—ã–±—Ä–∞–Ω–æ'] = df[selected_col].astype(str).str.lower().map({'true': True, 'false': False}).fillna(False)
            if selected_col != '–í—ã–±—Ä–∞–Ω–æ':
                df = df.drop(columns=[selected_col])
        else:
            df['–í—ã–±—Ä–∞–Ω–æ'] = False
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

def add_wishlist_item(sheet, item_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–∏—à–ª–∏—Å—Ç"""
    try:
        row_data = [
            "" if not item_data['selected'] else "TRUE",
            item_data['gift'],
            item_data['category'],
            item_data['description'],
            item_data['link']
        ]
        sheet.append_row(row_data)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
        return False

def update_wishlist_item(sheet, row_num, item_data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏—à–ª–∏—Å—Ç–∞"""
    try:
        row_data = [
            "" if not item_data['selected'] else "TRUE",
            item_data['gift'],
            item_data['category'],
            item_data['description'],
            item_data['link']
        ]
        for col, value in enumerate(row_data, 1):
            sheet.update_cell(row_num, col, value)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
        return False

def delete_wishlist_item(sheet, row_num):
    """–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"""
    try:
        sheet.delete_rows(row_num)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
        return False

def main():
    st.set_page_config(
        page_title="–í–∏—à–ª–∏—Å—Ç",
        page_icon="üéÅ",
        layout="wide"
    )
    
    st.title("–í–∏—à–ª–∏—Å—Ç")
    
    sheets_url = os.getenv('SHEETS_URL')
    st.write(f"**–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:** [–ø–µ—Ä–µ–π—Ç–∏]({sheets_url})")

    if not sheets_url or 'YOUR_SHEET_ID' in sheets_url:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SHEETS_URL –≤ —Ñ–∞–π–ª–µ .env")
        st.info("1. –°–æ–∑–¥–∞–π—Ç–µ Google Sheets —Ç–∞–±–ª–∏—Ü—É\n2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å email –∏–∑ credentials.json\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –≤ .env —Ñ–∞–π–ª")
        return
    
    client = get_google_sheets_client()
    if not client:
        return
    
    sheet = get_sheet_from_url(client, sheets_url)
    if not sheet:
        return
    
    df = load_wishlist_data(sheet)
    
    tab1, tab2 = st.tabs(["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", "‚ûï –î–æ–±–∞–≤–∏—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"])
    
    with tab1:
        st.subheader("–¢–µ–∫—É—â–∏–π –≤–∏—à–ª–∏—Å—Ç")
        
        if df.empty:
            st.info("–í–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ '–î–æ–±–∞–≤–∏—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'")
        else:
            col1, col2 = st.columns([3, 1])
            
            with col2:
                
                category_filter = st.selectbox(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    ["–í—Å–µ"] + list(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()) if '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' in df.columns else ["–í—Å–µ"]
                )
            
            filtered_df = df.copy()
                
            if category_filter != "–í—Å–µ" and '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' in filtered_df.columns:
                filtered_df = filtered_df[filtered_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category_filter]
            
            with col1:
                for idx, row in filtered_df.iterrows():
                    with st.expander(f"{row.get('–ü–æ–¥–∞—Ä–æ–∫', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"):
                        col_info, col_actions = st.columns([3, 1])
                        
                        with col_info:
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {row.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                            if row.get('–°—Å—ã–ª–∫–∞'):
                                st.write(f"**–°—Å—ã–ª–∫–∞:** [–ü–µ—Ä–µ–π—Ç–∏]({row['–°—Å—ã–ª–∫–∞']})")
                        
                        with col_actions:
                            if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{idx}"):
                                if delete_wishlist_item(sheet, idx + 2):
                                    st.success("–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!")
                                    st.rerun()
    
    with tab2:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç")
        
        with st.form("add_item_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                gift_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ *", key="gift_name")
                category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", key="category")
            
            with col2:
                description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", key="description")
                link = st.text_input("–°—Å—ã–ª–∫–∞", key="link")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏—à–ª–∏—Å—Ç")
            
            if submitted:
                if not gift_name.strip():
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
                else:
                    item_data = {
                        'selected': False,
                        'gift': gift_name.strip(),
                        'category': category.strip(),
                        'description': description.strip(),
                        'link': link.strip()
                    }
                    
                    if add_wishlist_item(sheet, item_data):
                        st.success("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏—à–ª–∏—Å—Ç!")
                        st.rerun()
        
        if not df.empty:
            st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            edit_item = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                options=range(len(df)),
                format_func=lambda x: df.iloc[x].get('–ü–æ–¥–∞—Ä–æ–∫', f'–≠–ª–µ–º–µ–Ω—Ç {x+1}'),
                key="edit_select"
            )
            
            if edit_item is not None:
                selected_row = df.iloc[edit_item]
                
                with st.form("edit_item_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        edit_gift_name = st.text_input(
                            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ *", 
                            value=selected_row.get('–ü–æ–¥–∞—Ä–æ–∫', ''),
                            key="edit_gift_name"
                        )
                        edit_category = st.text_input(
                            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
                            value=selected_row.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', ''),
                            key="edit_category"
                        )
                    
                    with col2:
                        edit_description = st.text_area(
                            "–û–ø–∏—Å–∞–Ω–∏–µ", 
                            value=selected_row.get('–û–ø–∏—Å–∞–Ω–∏–µ', ''),
                            key="edit_description"
                        )
                        edit_link = st.text_input(
                            "–°—Å—ã–ª–∫–∞", 
                            value=selected_row.get('–°—Å—ã–ª–∫–∞', ''),
                            key="edit_link"
                        )
                    
                    updated = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç")
                    
                    if updated:
                        if not edit_gift_name.strip():
                            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
                        else:
                            item_data = {
                                'selected': selected_row.get('–í—ã–±—Ä–∞–Ω–æ', False),
                                'gift': edit_gift_name.strip(),
                                'category': edit_category.strip(),
                                'description': edit_description.strip(),
                                'link': edit_link.strip()
                            }
                            
                            if update_wishlist_item(sheet, edit_item + 2, item_data):
                                st.success("–≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                st.rerun()

if __name__ == "__main__":
    main()